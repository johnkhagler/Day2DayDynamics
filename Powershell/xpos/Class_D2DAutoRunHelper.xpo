Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: D2DAutoRunHelper unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #D2DAutoRunHelper
    PROPERTIES
      Name                #D2DAutoRunHelper
      Origin              #{A8819E67-376B-40FD-86D9-D6E40D522A85}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class D2DAutoRunHelper
        #{
        #}
      ENDSOURCE
      SOURCE #AifPortRefresh
        #public static void AifPortRefresh(str _portName, str _serviceClass = '', str _disabledOperationList = '', str _disabledFieldList = '', str _requiredFieldList = '')
        #{
        #    AifPort             aifPort = aifPort::find(_portName);
        #    AifAction           aifAction;
        #    AifPortActionPolicy aifPortActionPolicy;
        #    int                 serviceClassId, documentClassId, i;
        #    AxdWizardParameters params;
        #    AifPortDocument     aifPortDocument;
        #    AifDocumentField    aifDocumentField;
        #    AifDataPolicy       aifDataPolicy;
        #    AifXPath            xPath;
        #    container           disabledOperationList = (_disabledOperationList == '' ? conNull() : str2con(_disabledOperationList, ','));
        #    container           disabledFieldList = (_disabledFieldList == '' ? conNull() : str2con(_disabledFieldList, ','));
        #    container           requiredFieldList = (_requiredFieldList == '' ? conNull() : str2con(_requiredFieldList, ','));
        #
        #    if (aifPort)
        #    {
        #        AifPortManager::undeployPort(aifPort.Name);
        #
        #        if (_serviceClass != '')
        #        {
        #            serviceClassId = className2Id(_serviceClass);
        #
        #            if (serviceClassId)
        #            {
        #                delete_from aifPortActionPolicy
        #                    exists join aifAction
        #                    where aifAction.ActionId == aifPortActionPolicy.ActionId
        #                       && aifAction.ClassId == serviceClassId
        #                       && aifPortActionPolicy.Port == aifPort.RecId;
        #
        #                while select ActionId, MethodName from aifAction
        #                    where aifAction.ClassId == serviceClassId
        #                {
        #                    if (!conFind(disabledOperationList, aifAction.MethodName))
        #                    {
        #                        aifPortActionPolicy.clear();
        #
        #                        aifPortActionPolicy.ActionId = aifAction.ActionId;
        #                        aifPortActionPolicy.Port = aifPort.RecId;
        #                        aifPortActionPolicy.insert();
        #                    }
        #                }
        #
        #                if (AifUtil::isDocumentService(_serviceClass))
        #                {
        #                    params = AifServiceClassGenerator::getServiceParameters(_serviceClass);
        #
        #                    if ((params != null) && (params.parmAifEntityClassName() != ''))
        #                    {
        #                        documentClassId = className2Id(params.parmAifEntityClassName());
        #                    }
        #
        #                    aifPortDocument = AifPortDocument::findByPortId(aifPort.RecId, documentClassId);
        #                    aifDataPolicy::synchronize(_portName, documentClassId);
        #
        #                    ttsBegin;
        #                    update_recordset aifDataPolicy
        #                        setting IsEnabled = true
        #                        where aifDataPolicy.PortDocument == aifPortDocument.RecId;
        #
        #                    update_recordset aifDataPolicy
        #                        setting IsRequired = false
        #                        where aifDataPolicy.PortDocument == aifPortDocument.RecId
        #                        exists join aifDocumentField
        #                        where aifDocumentField.RecId == aifDataPolicy.DocumentFieldRecId
        #                           && aifDocumentField.MinOccurs == 0;
        #                    ttsCommit;
        #
        #                    for (i=1; i<=conLen(disabledFieldList); i++)
        #                    {
        #                        aifDocumentField.clear();
        #                        aifDataPolicy.clear();
        #
        #                        xPath = conPeek(disabledFieldList, i);
        #                        aifDocumentField = AifDocumentField::find(aifPortDocument.DocumentClassId, xPath);
        #
        #                        ttsBegin;
        #                        select forupdate aifDataPolicy
        #                            where aifDataPolicy.PortDocument == aifPortDocument.RecId
        #                               && aifDataPolicy.DocumentFieldRecId == aifDocumentField.RecId;
        #
        #                        if (aifDataPolicy)
        #                        {
        #                            if (!aifDataPolicy.IsRequired)
        #                            {
        #                                aifDataPolicy.IsEnabled = false;
        #                                aifDataPolicy.update();
        #                            }
        #                            else
        #                            {
        #                                warning(strFmt("The %1 field is required.  Unable to disable it.", xPath));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            warning(strFmt("Unable to find the %1 field for disabling.", xPath));
        #                        }
        #                        ttsCommit;
        #                    }
        #
        #                    for (i=1; i<=conLen(requiredFieldList); i++)
        #                    {
        #                        aifDocumentField.clear();
        #                        aifDataPolicy.clear();
        #
        #                        xPath = conPeek(requiredFieldList, i);
        #                        aifDocumentField = AifDocumentField::find(aifPortDocument.DocumentClassId, xPath);
        #
        #                        ttsBegin;
        #                        select forupdate aifDataPolicy
        #                            where aifDataPolicy.PortDocument == aifPortDocument.RecId
        #                               && aifDataPolicy.DocumentFieldRecId == aifDocumentField.RecId;
        #
        #                        if (aifDataPolicy)
        #                        {
        #                            if (aifDataPolicy.IsEnabled)
        #                            {
        #                                aifDataPolicy.IsRequired = true;
        #                                aifDataPolicy.update();
        #                            }
        #                            else
        #                            {
        #                                warning(strFmt("The %1 field isn't enabled.  Unable to make it required.", xPath));
        #                            }
        #                        }
        #                        else
        #                        {
        #                            warning(strFmt("Unable to find the %1 field for requiring.", xPath));
        #                        }
        #                        ttsCommit;
        #                    }
        #
        #                    ttsBegin;
        #                    aifPortDocument.selectForUpdate(true);
        #                    aifPortDocument.IsDataPolicySynchronized = false;
        #                    aifPortDocument.update();
        #                    ttsCommit;
        #                }
        #            }
        #            else
        #            {
        #                warning(strFmt("Unable to find the %1 service class.", _serviceClass));
        #            }
        #        }
        #
        #        AifPortManager::deployPort(aifPort.Name);
        #
        #        info(strFmt("Refresh AIF Port %1.", _portName));
        #    }
        #    else
        #    {
        #         warning(strFmt("Unable to find AIF Port.", _portName));
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
